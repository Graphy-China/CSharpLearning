#=========================================
 1. Eliquent Ruby
 2. Essential Ruby. WEB: techotopia.com

#=========================================


#*== variable scope ==
local:    [a~z] or _
instance: @
class:    @@
global:	  $
constant: [A-Z] class / module / global

*== Comment Style ==
1. Let the code speak itself instead of needing subtitles.
   -name of class/method/variable
   -rearrange things by breaking up a long method ro
    collapsing two class together.
2.1 Background
2.2 Explain how to use your softeare masterpiece.

*== Naming Style ==
1. lowercase_words_separated_by_underscores.
2. class name is "Camel": eg. Document, LegalDocument.
3. const name ALL_UPPSERCASE. eg. ANTLERS_PER_MALE_MOOSE = 2

*== Parentheses Style ==
1. Function call: find_document( 'Frankenstein', 'Shelley')
2. Function call with no parameters: @content.split
3. conditions in control statements:
   if words.size < 100
      puts 'The document is not very long'
   end
*== Line Style ==
1. On statement a line.
2. Exception: empty or trivial method
  def method_to_be_overriden; end
3. code block consists of a single statement, fold into one line.
   eg. 10.times{ |n| puts "The number is #{n}" }
       doc.words.each { |word| puts word }

*== Control structure ==
unless: @title = new_title unless @read_only
	@title = new_title if @writable
until:  documnet.print_next_page until document.printed?
each:	fonts.each { |font| puts font }
map:	words.map  { |word| word.size}

*== variable length of parameter ==
*args: Ruby converts parameters into array implicity.

*== Collections and  oppors ==
Array: [1,2,2,3]
Hash:  [first:'mum', second:'dad']
Set: Set.new()

each:   words.each { |word| puts word}
map:    words.map  { |word| word.size}
inject: words.inject(0.0) { |result, word| word.size+resule}
array.reverse  vs array.reverse!
array.sort     vs array.sort!
many methods that with no ! will also change array in place:
push pop shift delete

*===================== String =============================
class: String
- Embed expressions in a string: "#{expression} is a #{b-expression}"
- %q{}  %q<> %q() %Q
- here document:
heres_one = <<EOF
This is the beginning of my heredocuement
And this is the end.
EOF

- String.lstrip !
- String.rstrip !
- String.strip !
- String.chomp
- String.chop
- String.upcase !
- String.downcase !
- String.swapcase !
- String.sub(search, replace) !
- String.gsub(search,replace) !
- String.split  String.split(delimiter)
- String.index
- Collection characteristic:
  - String.each_char {block}
  - String.each_byte {block}
  - String.each_line {block}
  string[index]  : index -1  [3..5]

Regular Expressions
- punctuation charasters:
  .  - match any single-charaster string
  *  - matches zeros or more of the things that came just before it.
  ?  - zero or one 
- sets, rangesm alternatives
  set   - eg: [aeiou]
  range - eg: [0-9] [a-z] [A-Z]
        - mix set and range: [0-9a-zAEIOU]
         \d - any digit
	 \d\d - any two digit number
	 \w   - any letter number underscore (word character)
	 \s   - any white space character: space tab newline

  alternatives - eg: A|B AM|PM A\.M\.|AM|P\.M\.|PM
  	       	     The (car|boat) is red
		     \d\d:\d\d (AM|PM)
  
  mix set range: [aeiou]* [0-9]* [0-9a-f]*
  mix . with * : .*

- RegExp in ruby
  - RegExp:  /regexp/
  - match operator  =~  :  result of match: index nil
    eg:  puts /\d\d:\d\d (AM|PM)/ =~ '10:24 PM'
         puts "It's morning!" if /AM/ =~ '10:25 AM'
   	 puts "It's morning!" if '10:25 AM' =~ /AM/
         puts "It's morning!" if '10:25 am' =~ /AM/i  #i will match /am/ or /AM/
  - RegExp as parameter: eg: @content.gsub!(/\d\d:\d\d (AM|PM)/, '**:** **')
  -regexp option:
    - m   .* will cross line.
    - i   /AkM/i  equals (AkM|aKm)
    - \A  match the beginning of a string.
    - \z  match the end of the string.
    - \^  match the beginning of the string or the beginning of any line within the string
    -  $  match the end of the string or the end of any line within the string

      eg: content = 'The Princess And the Monkey

Once upon a time there was a princess...
...and they all lived happily ever after.

The End'
     puts "Found it" if content =~ /^Once upon a time/
     puts "Found it" if content =~ /ever after\.$/

*===================== Symbol =============================
Using characters to stand for something in code.
There can only be one instance of any given symbol.
Symbol is immutable, it will not change.(usage: used in hash)
 - symbol.to_s
 - string.to_sym

*===================== Object ============================
 - self : similar to this in c++
 - root class: Object.
 - public/private/protected.

 - attr_accessor/attr_reader/attr_writer
 **------------------ common methods.
 - to_s:
 - public_methods
 - instance_variables
 ** 
 
*===================== Dynamic typing ====================
 - never write abstract classes/interfaces
 - 

*===================== Write Specs: test frame work =============

 - Test:Unit - XUnit alike test framework. refer to document_test.rb
 - rspec     - ruby spec (RSpec). refer to document_spec.rb.
 - ideal test xexrcises exactly one class at a time.
 - stub and mock
 - ut should run fast/ should run quiet/independent one another/.
   Do make shre that your tests will actually fail.

* =====  Construct class from Short/Focused Mehtods : composed method technique =======
  1. Each method should do a single thing - focus on solving a single aspect of the probrlem
  2. Each method needs to operate at a single conceptual level: Simply put, don't mix high-level logic with the nitty-gritty.
  3. Each method needs to have a name that reflects its purpose.

  - let program says what it does.
  - easier to test.

* =============================== equality ========================

  - eql?    : compare hash code of two object. default defined in Object. can be overrided. Default implementation is same as equal?  : if a.eql?(b) then a.hash == b.hash.
  - equal?  : to test object identity. cannot be overidded.
  - ==      : default behavior is defined in Object. Default behavior is same as equal?. can be overidded.
  - ===     : RegExp match with string in case statements.
  - 


  - a<=>b   : -1 if a < b. 0 if a == b. 1 if a > b
* =============================== ========================

 1. A.instance_of?(B) : A is an instance of class B, No subclass allowed.
 2. A.kind_of?(B)     : A is an instance of class B, or instance of B's subclass
 3. A.respond_to?(:method)  : If A has the "method" method.

* ================= singleton method  ========================
 1. - Format 1: def instance.method_name
    - Format 2: class << instance
      	     	  # define singleton method 1.
		  # define singleton method 2.
		  #  ...
		end
      
 2. - singleton methods are stuck to a single object instance.
    - singleton methods override any regular class-defined methods.
 
* ================ class level method    ==========================
1.  class method is singleton method on class object.

  class << MyClass
    def class_method  # class method.
    end
  end
2. class method: MyClass.class_method.
   Note: instance of MyClass totally ignorant about class methods.

* ================ class level data      ==========================
1. class variable: @@.  # vertical global variables
2. class instance variable: stick to class, no inheritance tree tracking

   @default_font = :numbes
   class << self
     attr_accessor :default_font
   end

* ========================= module      ==========================
1. modules can contains methods constants classes, and even other modules
2. usage of module: 
    1) module_name::element_name
    2) include module_name
       element_name.
3. module level method:
   module mymodule
     def self.method_name
       # ....
     end
   end
4. moudle can accross several source files.
5. module is an object, too.
   - the_module = module_name
   - module can be switched in runtime. (import for parall swith. refer to: p186)

6. when should we create a namespace?
   If creating a lot of names that all start with the same word.

7. mixin: share common code among otherwise unrelated classes.
   include module_name # mixin instance level methods.
   
   # : include a module and it becomes the nearest parent "class" of the including class.

8. extend: extend class level method by including module level method.
   class << self
     include module_name
   end

   or :  extend module_name
9.

* ========================= block    ==========================
 - method that has yield.
 - block is passed in as a parameter.
 - parameters can be passed into block.
 - Iterator: method with yield.
 - Iterator: main iterator should be named as "each"
 - Iterator: class that can be mixin with Enumerable.
 - Iterator: iterator with Enumerator class.

* ========================= hook    ==========================
 - inherited
 - included
 - at_exit
 - method_missing
 - method_added
 - trace_var
 - set_trace_func
 - 
